# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: "Setup Integration tests for HPC toolkit"
  hosts: localhost
  vars:
    scripts_dir: "{{ workspace }}/tools/cloud-build/daily-tests"
  tasks:
  ## Create SSH Keys
  - name: "Create .ssh folder"
    file:
      path: "/builder/home/.ssh"
      state: directory
      mode: 0700
  - name: Create SSH Key
    openssh_keypair:
      path: "/builder/home/.ssh/id_rsa"

  ## Create cluster
  - name: Create Deployment Directory
    command: "{{ scripts_dir }}/create_deployment.sh"
    environment:
      EXAMPLE_YAML: "{{ blueprint_yaml }}"
      PROJECT_ID: "{{ project }}"
      ROOT_DIR: "{{ workspace }}"
      BLUEPRINT_DIR: "{{ blueprint_dir }}"
      DEPLOYMENT_NAME: "{{ deployment_name }}"
    args:
      creates: "{{ workspace }}/{{ deployment_name }}.tgz"
  - name: Create Infrastructure and test
    block:
    - name: Setup network and HTCondor install scripts
      command:
        cmd: "{{ item }}"
        chdir: "{{ workspace }}/{{ deployment_name }}/htcondor-env"
      args:
        creates: "{{ workspace }}/{{ deployment_name }}/.terraform"
      environment:
        TF_IN_AUTOMATION: "TRUE"
      with_items:
      - terraform init
      - terraform validate
      - terraform apply -auto-approve -no-color
    - name: Get startup_script
      register: network_name
      args:
        chdir: "{{ workspace }}/{{ deployment_name }}/htcondor-env"
      ansible.builtin.shell: |
        terraform output startup_script_htcondor_install_scripts > \
          ../packer/custom-image/startup_script.sh
    - name: Create VM image with Packer
      command:
        cmd: "{{ item }}"
        chdir: "{{ workspace }}/{{ deployment_name }}/packer/custom-image"
      with_items:
      - packer init .
      - packer validate -var startup_script=startup_script.sh .
      - packer build -var startup_script=startup_script.sh .
    - name: Setup HTCondor Pool
      command:
        cmd: "{{ item }}"
        chdir: "{{ workspace }}/{{ deployment_name }}/pool"
      args:
        creates: "{{ workspace }}/{{ deployment_name }}/.terraform"
      environment:
        TF_IN_AUTOMATION: "TRUE"
      with_items:
      - terraform init
      - terraform validate
      - terraform apply -auto-approve -no-color
    - name: Get access point IP
      register: access_ip
      args:
        chdir: "{{ workspace }}/{{ deployment_name }}/pool"
      ansible.builtin.shell: |
        terraform output -json internal_ip_htcondor_access | jq -r '.[0]'
    - name: Add Login node as host
      add_host:
        hostname: "{{ access_ip.stdout }}"
        groups: [remote_host]
    - name: Add SSH Keys to OS Login
      command:
        argv:
        - gcloud
        - compute
        - os-login
        - ssh-keys
        - add
        - --ttl
        - 2h
        - "--key-file=/builder/home/.ssh/id_rsa.pub"
    # - name: Wait for cluster
    #   wait_for_connection:
    ## Cleanup and fail gracefully
    always:
    - name: Tear Down Pool
      run_once: true
      delegate_to: localhost
      environment:
        TF_IN_AUTOMATION: "TRUE"
      command:
        cmd: "{{ item }}"
        chdir: "{{ workspace }}/{{ deployment_name }}/pool"
      with_items:
      - terraform init
      - terraform destroy -auto-approve
    - name: Get image name
      register: image_name
      args:
        chdir: "{{ workspace }}/{{ deployment_name }}/packer/custom-image"
      ansible.builtin.shell: |
        jq -r '.builds[-1].artifact_id' packer-manifest.json | cut -d ":" -f2
    - name: Delete custom image
      ignore_errors: true
      ansible.builtin.command:
        cmd: gcloud compute images delete {{ image_name.stdout }}
    - name: Tear Down Network
      run_once: true
      delegate_to: localhost
      environment:
        TF_IN_AUTOMATION: "TRUE"
      command:
        cmd: "{{ item }}"
        chdir: "{{ workspace }}/{{ deployment_name }}/htcondor-env"
      with_items:
      - terraform init
      - terraform destroy -auto-approve
        # - name: Fail Out
        #   fail:
        #     msg: "Failed while setting up test infrastructure"
        #   when: true
        # - name: Run Integration Tests
        #   hosts: remote_host
        #   gather_facts: false
        #   tasks:
        #   - name: HTCondor Test Block
        #     vars:
        #       ansible_ssh_private_key_file: "/builder/home/.ssh/id_rsa"
        #     block:
        #     - name: Pause for 2 minutes to allow cluster setup
        #       pause:
        #         minutes: 2
        #     - name: Run Integration tests for HPC toolkit
        #       include_tasks: "{{ test }}"
        #       run_once: true
        #       vars:
        #         access_point: "{{ access_point }}"
        #       loop: "{{ post_deploy_tests }}"
        #       loop_control:
        #         loop_var: test
        #
        #     - name: Delete Firewall Rule
        #       run_once: true
        #       delegate_to: localhost
        #       command:
        #         argv:
        #         - gcloud
        #         - compute
        #         - firewall-rules
        #         - delete
        #         - "{{ deployment_name }}"
        #       ignore_errors: true
        #     - name: Tear Down Cluster
        #       run_once: true
        #       delegate_to: localhost
        #       environment:
        #         TF_IN_AUTOMATION: "TRUE"
        #       command:
        #         cmd: terraform destroy -auto-approve
        #         chdir: "{{ workspace }}/{{ deployment_name }}/primary"
